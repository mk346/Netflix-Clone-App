{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.271b6058.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n//base url to make request to the movies database\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    // A snippet of code that runs based on a specific condition/ variable\r\n    useEffect(() => {\r\n        //pull data from movies database\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData(); \r\n        \r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n\r\n        },\r\n    };\r\n    \r\n    const handleClick = (movie) => {\r\n        if (trailerUrl){\r\n            setTrailerUrl('');\r\n        } else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get(\"v\"));\r\n\r\n            })\r\n            .catch(error => console.log(error));\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie =>(\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ?  movie.poster_path : movie.backdrop_path}`} alt={movie.name}></img>\r\n                )) }\r\n\r\n         </div>\r\n         {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n                \r\n    );\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"5720afab19ba1d0ce2aac1ab85071ba7\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&languages=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&languages=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react';\r\nimport axios  from './axios';\r\nimport requests from './request';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]\r\n            );\r\n            return request;\r\n\r\n        }\r\n\r\n        fetchData ();\r\n            \r\n        \r\n    }, []);\r\n\r\n    console.log(movie);\r\n    function truncate(str, n){\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition: \"center center\",\r\n        }}\r\n        \r\n        >\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name }</h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">{movie?.overview}\r\n                {truncate(movie?.overview, 150)}\r\n                </h1>\r\n\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"></div>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useState,useEffect} from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",() =>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true)\r\n\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img \r\n            className=\"nav_logo\"\r\n            src=\"https://pnglux.com/wp-content/uploads/2021/03/1617196638_210_Netflix-logo-PNG-Photos.png\" \r\n            alt=\"Netflix Logo\">\r\n                \r\n            </img>\r\n            <img className=\"nav_avatar\"\r\n             src=\"https://w7.pngwing.com/pngs/81/570/png-transparent-profile-logo-computer-icons-user-user-blue-heroes-logo-thumbnail.png\" \r\n             alt=\"Netflix logo\">\r\n\r\n             </img>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport request from './request';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav></Nav>\n      <Banner></Banner>\n      \n      <Row \n      title=\"Netflix Originals\" \n      fetchUrl={request.fetchNetflixOriginals}\n      isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={request.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={request.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={request.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={request.fetchComedyMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={request.fetchRomanceMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={request.fetchHorrorMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={request.fetchDocumentaries}/>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}